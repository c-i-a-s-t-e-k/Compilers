
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEleftDOTADDDOTSUBleftADDMINUSleftDOTMULDOTDIVIDEleftDIVIDEMULrightUMINUSADD ADDASSIGN BREAK CONTINUE DIVASSIGN DIVIDE DOTADD DOTDIVIDE DOTMUL DOTSUB ELSE EQ EYE FLOAT FOR GREATER GREATEREQ ID IF INTNUM LESS LESSEQ MINUS MUL MULASSIGN NOTEQ ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSprogram : instructions_optinstructions_opt : instructions instructions_opt : instructions : instructions instruction instructions : instruction instruction : \'{\' instructions \'}\'instruction : assignment \n                    | if_stmt\n                    | loops\n                    | break\n                    | continue \n                    | return_expr \';\'instruction : PRINT create_stmt \';\'continue : CONTINUE \';\'break : BREAK \';\'id_change : ID \n                    | ID \'[\' expression \',\' expression \']\'\n                    | ID \'[\' expression \']\'assignment : id_change \'=\' expression \';\'\n                    | id_change ADDASSIGN expression \';\'\n                    | id_change SUBASSIGN expression \';\'\n                    | id_change MULASSIGN expression \';\'\n                    | id_change DIVASSIGN expression \';\'\n                    | id_change \'=\' id_change \';\'\n                    | id_change ADDASSIGN id_change \';\'\n                    | id_change SUBASSIGN id_change \';\'\n                    | id_change MULASSIGN id_change \';\'\n                    | id_change DIVASSIGN id_change \';\'expression : expression ADD expression\n                    | expression MINUS expression\n                    | expression MUL expression\n                    | expression DIVIDE expressionexpression : MINUS expression %prec UMINUSexpression : ID "\'"expression : expression DOTADD expression\n                    | expression DOTSUB expression\n                    | expression DOTMUL expression\n                    | expression DOTDIVIDE expressionexpression : matrix_expression\n                    | matrix_create\n                    | vector_createexpression : INTNUMexpression : FLOATexpression : IDmatrix_expression : ZEROS \'(\' expression \')\' matrix_expression : ONES \'(\' expression \')\' matrix_expression : EYE \'(\' expression \')\' matrix_create : \'[\' matrix_rows \']\'vector_create : \'[\' vector_elems \']\'vector_elems : expression \',\' vector_elems\n                    | expressionmatrix_rows : \'[\' matrix_elems \']\' \',\' matrix_rows\n                    | \'[\' matrix_elems \']\'matrix_elems : expression \',\' matrix_elems\n                    | expressioncondition : expression GREATER expression\n                    | expression LESS expression\n                    | expression GREATEREQ expression\n                    | expression LESSEQ expression\n                    | expression NOTEQ expression\n                    | expression EQ expressionif_stmt : IF \'(\' condition \')\' instruction %prec IFX\n                | IF \'(\' condition \')\' instruction ELSE instruction\n                create_stmt : p_print_listp_print_list : STRING p_print_list : p_print_list \',\' expression\n                    | expressionloops : while_l\n                | for_lwhile_l : WHILE "(" condition ")" instructionfor_l : FOR ID "=" expression ":" expression instructionreturn_expr : RETURN\n                    | RETURN expressionexpression : \'(\' expression \')\''
    
_lr_action_items = {'$end':([0,1,2,3,4,6,7,8,9,10,15,16,23,25,48,49,54,55,109,110,111,112,113,114,115,116,117,118,136,144,153,154,],[-3,0,-1,-2,-5,-7,-8,-9,-10,-11,-68,-69,-4,-12,-15,-14,-6,-13,-24,-19,-25,-20,-26,-21,-27,-22,-28,-23,-62,-70,-63,-71,]),'{':([0,3,4,5,6,7,8,9,10,15,16,23,24,25,31,32,33,34,35,36,48,49,54,55,65,66,92,93,94,95,96,97,98,99,100,106,107,109,110,111,112,113,114,115,116,117,118,119,128,130,131,132,136,144,148,150,153,154,],[5,5,-5,5,-7,-8,-9,-10,-11,-68,-69,-4,5,-12,-44,-39,-40,-41,-42,-43,-15,-14,-6,-13,-33,-34,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-24,-19,-25,-20,-26,-21,-27,-22,-28,-23,5,5,-45,-46,-47,-62,-70,5,5,-63,-71,]),'PRINT':([0,3,4,5,6,7,8,9,10,15,16,23,24,25,31,32,33,34,35,36,48,49,54,55,65,66,92,93,94,95,96,97,98,99,100,106,107,109,110,111,112,113,114,115,116,117,118,119,128,130,131,132,136,144,148,150,153,154,],[12,12,-5,12,-7,-8,-9,-10,-11,-68,-69,-4,12,-12,-44,-39,-40,-41,-42,-43,-15,-14,-6,-13,-33,-34,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-24,-19,-25,-20,-26,-21,-27,-22,-28,-23,12,12,-45,-46,-47,-62,-70,12,12,-63,-71,]),'IF':([0,3,4,5,6,7,8,9,10,15,16,23,24,25,31,32,33,34,35,36,48,49,54,55,65,66,92,93,94,95,96,97,98,99,100,106,107,109,110,111,112,113,114,115,116,117,118,119,128,130,131,132,136,144,148,150,153,154,],[14,14,-5,14,-7,-8,-9,-10,-11,-68,-69,-4,14,-12,-44,-39,-40,-41,-42,-43,-15,-14,-6,-13,-33,-34,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-24,-19,-25,-20,-26,-21,-27,-22,-28,-23,14,14,-45,-46,-47,-62,-70,14,14,-63,-71,]),'BREAK':([0,3,4,5,6,7,8,9,10,15,16,23,24,25,31,32,33,34,35,36,48,49,54,55,65,66,92,93,94,95,96,97,98,99,100,106,107,109,110,111,112,113,114,115,116,117,118,119,128,130,131,132,136,144,148,150,153,154,],[17,17,-5,17,-7,-8,-9,-10,-11,-68,-69,-4,17,-12,-44,-39,-40,-41,-42,-43,-15,-14,-6,-13,-33,-34,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-24,-19,-25,-20,-26,-21,-27,-22,-28,-23,17,17,-45,-46,-47,-62,-70,17,17,-63,-71,]),'CONTINUE':([0,3,4,5,6,7,8,9,10,15,16,23,24,25,31,32,33,34,35,36,48,49,54,55,65,66,92,93,94,95,96,97,98,99,100,106,107,109,110,111,112,113,114,115,116,117,118,119,128,130,131,132,136,144,148,150,153,154,],[18,18,-5,18,-7,-8,-9,-10,-11,-68,-69,-4,18,-12,-44,-39,-40,-41,-42,-43,-15,-14,-6,-13,-33,-34,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-24,-19,-25,-20,-26,-21,-27,-22,-28,-23,18,18,-45,-46,-47,-62,-70,18,18,-63,-71,]),'RETURN':([0,3,4,5,6,7,8,9,10,15,16,23,24,25,31,32,33,34,35,36,48,49,54,55,65,66,92,93,94,95,96,97,98,99,100,106,107,109,110,111,112,113,114,115,116,117,118,119,128,130,131,132,136,144,148,150,153,154,],[19,19,-5,19,-7,-8,-9,-10,-11,-68,-69,-4,19,-12,-44,-39,-40,-41,-42,-43,-15,-14,-6,-13,-33,-34,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-24,-19,-25,-20,-26,-21,-27,-22,-28,-23,19,19,-45,-46,-47,-62,-70,19,19,-63,-71,]),'ID':([0,3,4,5,6,7,8,9,10,12,15,16,19,22,23,24,25,30,31,32,33,34,35,36,37,41,42,43,44,45,46,47,48,49,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,90,92,93,94,95,96,97,98,99,100,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,130,131,132,134,136,144,145,148,150,151,153,154,156,],[20,20,-5,20,-7,-8,-9,-10,-11,31,-68,-69,31,53,-4,20,-12,31,-44,-39,-40,-41,-42,-43,31,31,77,77,77,77,77,31,-15,-14,31,31,-6,-13,31,31,31,31,31,31,31,31,31,-33,-34,31,31,31,31,31,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,31,-24,-19,-25,-20,-26,-21,-27,-22,-28,-23,20,31,31,31,31,31,31,31,20,-45,-46,-47,31,-62,-70,31,20,20,31,-63,-71,31,]),'WHILE':([0,3,4,5,6,7,8,9,10,15,16,23,24,25,31,32,33,34,35,36,48,49,54,55,65,66,92,93,94,95,96,97,98,99,100,106,107,109,110,111,112,113,114,115,116,117,118,119,128,130,131,132,136,144,148,150,153,154,],[21,21,-5,21,-7,-8,-9,-10,-11,-68,-69,-4,21,-12,-44,-39,-40,-41,-42,-43,-15,-14,-6,-13,-33,-34,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-24,-19,-25,-20,-26,-21,-27,-22,-28,-23,21,21,-45,-46,-47,-62,-70,21,21,-63,-71,]),'FOR':([0,3,4,5,6,7,8,9,10,15,16,23,24,25,31,32,33,34,35,36,48,49,54,55,65,66,92,93,94,95,96,97,98,99,100,106,107,109,110,111,112,113,114,115,116,117,118,119,128,130,131,132,136,144,148,150,153,154,],[22,22,-5,22,-7,-8,-9,-10,-11,-68,-69,-4,22,-12,-44,-39,-40,-41,-42,-43,-15,-14,-6,-13,-33,-34,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-24,-19,-25,-20,-26,-21,-27,-22,-28,-23,22,22,-45,-46,-47,-62,-70,22,22,-63,-71,]),'}':([4,6,7,8,9,10,15,16,23,24,25,48,49,54,55,109,110,111,112,113,114,115,116,117,118,136,144,153,154,],[-5,-7,-8,-9,-10,-11,-68,-69,-4,54,-12,-15,-14,-6,-13,-24,-19,-25,-20,-26,-21,-27,-22,-28,-23,-62,-70,-63,-71,]),'ELSE':([6,7,8,9,10,15,16,25,48,49,54,55,109,110,111,112,113,114,115,116,117,118,136,144,153,154,],[-7,-8,-9,-10,-11,-68,-69,-12,-15,-14,-6,-13,-24,-19,-25,-20,-26,-21,-27,-22,-28,-23,148,-70,-63,-71,]),';':([11,17,18,19,26,27,28,29,31,32,33,34,35,36,50,65,66,75,76,77,78,79,80,81,82,83,84,85,91,92,93,94,95,96,97,98,99,100,106,107,127,130,131,132,149,],[25,48,49,-72,55,-64,-65,-67,-44,-39,-40,-41,-42,-43,-73,-33,-34,109,110,-16,111,112,113,114,115,116,117,118,-66,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-18,-45,-46,-47,-17,]),'STRING':([12,],[28,]),'MINUS':([12,19,29,30,31,32,33,34,35,36,37,41,42,43,44,45,46,47,50,51,52,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,76,77,79,81,83,85,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,108,120,121,122,123,124,125,126,129,130,131,132,134,137,138,139,140,141,142,143,145,150,151,155,156,],[30,30,58,30,-44,-39,-40,-41,-42,-43,30,30,30,30,30,30,30,30,58,30,30,30,30,30,30,30,30,30,30,30,-33,-34,58,30,30,30,30,58,58,-44,58,58,58,58,58,58,30,58,-29,-30,-31,-32,58,58,-37,-38,-74,58,58,58,58,-48,-49,30,30,30,30,30,30,30,30,58,-45,-46,-47,30,58,58,58,58,58,58,58,30,58,30,58,30,]),'INTNUM':([12,19,30,37,41,42,43,44,45,46,47,51,52,56,57,58,59,60,61,62,63,64,68,69,70,71,90,108,120,121,122,123,124,125,126,134,145,151,156,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'FLOAT':([12,19,30,37,41,42,43,44,45,46,47,51,52,56,57,58,59,60,61,62,63,64,68,69,70,71,90,108,120,121,122,123,124,125,126,134,145,151,156,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'(':([12,14,19,21,30,37,38,39,40,41,42,43,44,45,46,47,51,52,56,57,58,59,60,61,62,63,64,68,69,70,71,90,108,120,121,122,123,124,125,126,134,145,151,156,],[37,47,37,52,37,37,68,69,70,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'ZEROS':([12,19,30,37,41,42,43,44,45,46,47,51,52,56,57,58,59,60,61,62,63,64,68,69,70,71,90,108,120,121,122,123,124,125,126,134,145,151,156,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'ONES':([12,19,30,37,41,42,43,44,45,46,47,51,52,56,57,58,59,60,61,62,63,64,68,69,70,71,90,108,120,121,122,123,124,125,126,134,145,151,156,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'EYE':([12,19,30,37,41,42,43,44,45,46,47,51,52,56,57,58,59,60,61,62,63,64,68,69,70,71,90,108,120,121,122,123,124,125,126,134,145,151,156,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'[':([12,19,20,30,37,41,42,43,44,45,46,47,51,52,56,57,58,59,60,61,62,63,64,68,69,70,71,77,90,108,120,121,122,123,124,125,126,134,145,146,151,156,],[41,41,51,41,41,71,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,71,51,41,41,41,41,41,41,41,41,41,41,41,151,41,41,]),'=':([13,20,53,127,149,],[42,-16,90,-18,-17,]),'ADDASSIGN':([13,20,127,149,],[43,-16,-18,-17,]),'SUBASSIGN':([13,20,127,149,],[44,-16,-18,-17,]),'MULASSIGN':([13,20,127,149,],[45,-16,-18,-17,]),'DIVASSIGN':([13,20,127,149,],[46,-16,-18,-17,]),',':([27,28,29,31,32,33,34,35,36,65,66,74,88,91,92,93,94,95,96,97,98,99,100,105,106,107,130,131,132,133,155,],[56,-65,-67,-44,-39,-40,-41,-42,-43,-33,-34,108,126,-66,-29,-30,-31,-32,-35,-36,-37,-38,-74,134,-48,-49,-45,-46,-47,146,156,]),'ADD':([29,31,32,33,34,35,36,50,65,66,67,74,76,77,79,81,83,85,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,129,130,131,132,137,138,139,140,141,142,143,150,155,],[57,-44,-39,-40,-41,-42,-43,57,-33,-34,57,57,57,-44,57,57,57,57,57,57,57,-29,-30,-31,-32,57,57,-37,-38,-74,57,57,57,57,-48,-49,57,-45,-46,-47,57,57,57,57,57,57,57,57,57,]),'MUL':([29,31,32,33,34,35,36,50,65,66,67,74,76,77,79,81,83,85,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,129,130,131,132,137,138,139,140,141,142,143,150,155,],[59,-44,-39,-40,-41,-42,-43,59,-33,-34,59,59,59,-44,59,59,59,59,59,59,59,59,59,-31,-32,59,59,59,59,-74,59,59,59,59,-48,-49,59,-45,-46,-47,59,59,59,59,59,59,59,59,59,]),'DIVIDE':([29,31,32,33,34,35,36,50,65,66,67,74,76,77,79,81,83,85,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,129,130,131,132,137,138,139,140,141,142,143,150,155,],[60,-44,-39,-40,-41,-42,-43,60,-33,-34,60,60,60,-44,60,60,60,60,60,60,60,60,60,-31,-32,60,60,60,60,-74,60,60,60,60,-48,-49,60,-45,-46,-47,60,60,60,60,60,60,60,60,60,]),'DOTADD':([29,31,32,33,34,35,36,50,65,66,67,74,76,77,79,81,83,85,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,129,130,131,132,137,138,139,140,141,142,143,150,155,],[61,-44,-39,-40,-41,-42,-43,61,-33,-34,61,61,61,-44,61,61,61,61,61,61,61,-29,-30,-31,-32,-35,-36,-37,-38,-74,61,61,61,61,-48,-49,61,-45,-46,-47,61,61,61,61,61,61,61,61,61,]),'DOTSUB':([29,31,32,33,34,35,36,50,65,66,67,74,76,77,79,81,83,85,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,129,130,131,132,137,138,139,140,141,142,143,150,155,],[62,-44,-39,-40,-41,-42,-43,62,-33,-34,62,62,62,-44,62,62,62,62,62,62,62,-29,-30,-31,-32,-35,-36,-37,-38,-74,62,62,62,62,-48,-49,62,-45,-46,-47,62,62,62,62,62,62,62,62,62,]),'DOTMUL':([29,31,32,33,34,35,36,50,65,66,67,74,76,77,79,81,83,85,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,129,130,131,132,137,138,139,140,141,142,143,150,155,],[63,-44,-39,-40,-41,-42,-43,63,-33,-34,63,63,63,-44,63,63,63,63,63,63,63,63,63,-31,-32,63,63,-37,-38,-74,63,63,63,63,-48,-49,63,-45,-46,-47,63,63,63,63,63,63,63,63,63,]),'DOTDIVIDE':([29,31,32,33,34,35,36,50,65,66,67,74,76,77,79,81,83,85,87,88,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,129,130,131,132,137,138,139,140,141,142,143,150,155,],[64,-44,-39,-40,-41,-42,-43,64,-33,-34,64,64,64,-44,64,64,64,64,64,64,64,64,64,-31,-32,64,64,-37,-38,-74,64,64,64,64,-48,-49,64,-45,-46,-47,64,64,64,64,64,64,64,64,64,]),"'":([31,77,],[66,66,]),')':([31,32,33,34,35,36,65,66,67,86,89,92,93,94,95,96,97,98,99,100,101,102,103,106,107,130,131,132,137,138,139,140,141,142,],[-44,-39,-40,-41,-42,-43,-33,-34,100,119,128,-29,-30,-31,-32,-35,-36,-37,-38,-74,130,131,132,-48,-49,-45,-46,-47,-56,-57,-58,-59,-60,-61,]),']':([31,32,33,34,35,36,65,66,72,73,74,88,92,93,94,95,96,97,98,99,100,104,105,106,107,130,131,132,133,135,143,147,152,155,],[-44,-39,-40,-41,-42,-43,-33,-34,106,107,-51,127,-29,-30,-31,-32,-35,-36,-37,-38,-74,133,-51,-48,-49,-45,-46,-47,-53,-50,149,-54,-52,-55,]),'GREATER':([31,32,33,34,35,36,65,66,87,92,93,94,95,96,97,98,99,100,106,107,130,131,132,],[-44,-39,-40,-41,-42,-43,-33,-34,120,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-45,-46,-47,]),'LESS':([31,32,33,34,35,36,65,66,87,92,93,94,95,96,97,98,99,100,106,107,130,131,132,],[-44,-39,-40,-41,-42,-43,-33,-34,121,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-45,-46,-47,]),'GREATEREQ':([31,32,33,34,35,36,65,66,87,92,93,94,95,96,97,98,99,100,106,107,130,131,132,],[-44,-39,-40,-41,-42,-43,-33,-34,122,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-45,-46,-47,]),'LESSEQ':([31,32,33,34,35,36,65,66,87,92,93,94,95,96,97,98,99,100,106,107,130,131,132,],[-44,-39,-40,-41,-42,-43,-33,-34,123,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-45,-46,-47,]),'NOTEQ':([31,32,33,34,35,36,65,66,87,92,93,94,95,96,97,98,99,100,106,107,130,131,132,],[-44,-39,-40,-41,-42,-43,-33,-34,124,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-45,-46,-47,]),'EQ':([31,32,33,34,35,36,65,66,87,92,93,94,95,96,97,98,99,100,106,107,130,131,132,],[-44,-39,-40,-41,-42,-43,-33,-34,125,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,-45,-46,-47,]),':':([31,32,33,34,35,36,65,66,92,93,94,95,96,97,98,99,100,106,107,129,130,131,132,],[-44,-39,-40,-41,-42,-43,-33,-34,-29,-30,-31,-32,-35,-36,-37,-38,-74,-48,-49,145,-45,-46,-47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,5,],[3,24,]),'instruction':([0,3,5,24,119,128,148,150,],[4,23,4,23,136,144,153,154,]),'assignment':([0,3,5,24,119,128,148,150,],[6,6,6,6,6,6,6,6,]),'if_stmt':([0,3,5,24,119,128,148,150,],[7,7,7,7,7,7,7,7,]),'loops':([0,3,5,24,119,128,148,150,],[8,8,8,8,8,8,8,8,]),'break':([0,3,5,24,119,128,148,150,],[9,9,9,9,9,9,9,9,]),'continue':([0,3,5,24,119,128,148,150,],[10,10,10,10,10,10,10,10,]),'return_expr':([0,3,5,24,119,128,148,150,],[11,11,11,11,11,11,11,11,]),'id_change':([0,3,5,24,42,43,44,45,46,119,128,148,150,],[13,13,13,13,75,78,80,82,84,13,13,13,13,]),'while_l':([0,3,5,24,119,128,148,150,],[15,15,15,15,15,15,15,15,]),'for_l':([0,3,5,24,119,128,148,150,],[16,16,16,16,16,16,16,16,]),'create_stmt':([12,],[26,]),'p_print_list':([12,],[27,]),'expression':([12,19,30,37,41,42,43,44,45,46,47,51,52,56,57,58,59,60,61,62,63,64,68,69,70,71,90,108,120,121,122,123,124,125,126,134,145,151,156,],[29,50,65,67,74,76,79,81,83,85,87,88,87,91,92,93,94,95,96,97,98,99,101,102,103,105,129,74,137,138,139,140,141,142,143,105,150,155,155,]),'matrix_expression':([12,19,30,37,41,42,43,44,45,46,47,51,52,56,57,58,59,60,61,62,63,64,68,69,70,71,90,108,120,121,122,123,124,125,126,134,145,151,156,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'matrix_create':([12,19,30,37,41,42,43,44,45,46,47,51,52,56,57,58,59,60,61,62,63,64,68,69,70,71,90,108,120,121,122,123,124,125,126,134,145,151,156,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'vector_create':([12,19,30,37,41,42,43,44,45,46,47,51,52,56,57,58,59,60,61,62,63,64,68,69,70,71,90,108,120,121,122,123,124,125,126,134,145,151,156,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'matrix_rows':([41,71,146,],[72,72,152,]),'vector_elems':([41,71,108,134,],[73,73,135,135,]),'condition':([47,52,],[86,89,]),'matrix_elems':([71,134,151,156,],[104,147,104,147,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',23),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt_1','Mparser.py',27),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instructions_opt_2','Mparser.py',31),
  ('instructions -> instructions instruction','instructions',2,'p_instructions_1','Mparser.py',35),
  ('instructions -> instruction','instructions',1,'p_instructions_2','Mparser.py',39),
  ('instruction -> { instructions }','instruction',3,'p_instruction_brackets','Mparser.py',43),
  ('instruction -> assignment','instruction',1,'p_instruction','Mparser.py',47),
  ('instruction -> if_stmt','instruction',1,'p_instruction','Mparser.py',48),
  ('instruction -> loops','instruction',1,'p_instruction','Mparser.py',49),
  ('instruction -> break','instruction',1,'p_instruction','Mparser.py',50),
  ('instruction -> continue','instruction',1,'p_instruction','Mparser.py',51),
  ('instruction -> return_expr ;','instruction',2,'p_instruction','Mparser.py',52),
  ('instruction -> PRINT create_stmt ;','instruction',3,'p_instruction_2','Mparser.py',56),
  ('continue -> CONTINUE ;','continue',2,'p_continue','Mparser.py',60),
  ('break -> BREAK ;','break',2,'p_break','Mparser.py',64),
  ('id_change -> ID','id_change',1,'p_id_change','Mparser.py',68),
  ('id_change -> ID [ expression , expression ]','id_change',6,'p_id_change','Mparser.py',69),
  ('id_change -> ID [ expression ]','id_change',4,'p_id_change','Mparser.py',70),
  ('assignment -> id_change = expression ;','assignment',4,'p_assignment','Mparser.py',79),
  ('assignment -> id_change ADDASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',80),
  ('assignment -> id_change SUBASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',81),
  ('assignment -> id_change MULASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',82),
  ('assignment -> id_change DIVASSIGN expression ;','assignment',4,'p_assignment','Mparser.py',83),
  ('assignment -> id_change = id_change ;','assignment',4,'p_assignment','Mparser.py',84),
  ('assignment -> id_change ADDASSIGN id_change ;','assignment',4,'p_assignment','Mparser.py',85),
  ('assignment -> id_change SUBASSIGN id_change ;','assignment',4,'p_assignment','Mparser.py',86),
  ('assignment -> id_change MULASSIGN id_change ;','assignment',4,'p_assignment','Mparser.py',87),
  ('assignment -> id_change DIVASSIGN id_change ;','assignment',4,'p_assignment','Mparser.py',88),
  ('expression -> expression ADD expression','expression',3,'p_expression_binop','Mparser.py',92),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','Mparser.py',93),
  ('expression -> expression MUL expression','expression',3,'p_expression_binop','Mparser.py',94),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','Mparser.py',95),
  ('expression -> MINUS expression','expression',2,'p_expressions_unaryneg','Mparser.py',99),
  ("expression -> ID '",'expression',2,'p_expressions_transpose','Mparser.py',103),
  ('expression -> expression DOTADD expression','expression',3,'p_expression_matrixop','Mparser.py',107),
  ('expression -> expression DOTSUB expression','expression',3,'p_expression_matrixop','Mparser.py',108),
  ('expression -> expression DOTMUL expression','expression',3,'p_expression_matrixop','Mparser.py',109),
  ('expression -> expression DOTDIVIDE expression','expression',3,'p_expression_matrixop','Mparser.py',110),
  ('expression -> matrix_expression','expression',1,'p_expression_number','Mparser.py',114),
  ('expression -> matrix_create','expression',1,'p_expression_number','Mparser.py',115),
  ('expression -> vector_create','expression',1,'p_expression_number','Mparser.py',116),
  ('expression -> INTNUM','expression',1,'p_intnum','Mparser.py',120),
  ('expression -> FLOAT','expression',1,'p_float','Mparser.py',124),
  ('expression -> ID','expression',1,'p_expression_id','Mparser.py',128),
  ('matrix_expression -> ZEROS ( expression )','matrix_expression',4,'p_matrix_expression_z','Mparser.py',132),
  ('matrix_expression -> ONES ( expression )','matrix_expression',4,'p_matrix_expression_o','Mparser.py',136),
  ('matrix_expression -> EYE ( expression )','matrix_expression',4,'p_matrix_expression_e','Mparser.py',140),
  ('matrix_create -> [ matrix_rows ]','matrix_create',3,'p_matrix_create','Mparser.py',144),
  ('vector_create -> [ vector_elems ]','vector_create',3,'p_vector_create','Mparser.py',148),
  ('vector_elems -> expression , vector_elems','vector_elems',3,'p_vector_elems','Mparser.py',152),
  ('vector_elems -> expression','vector_elems',1,'p_vector_elems','Mparser.py',153),
  ('matrix_rows -> [ matrix_elems ] , matrix_rows','matrix_rows',5,'p_matrix_rows','Mparser.py',160),
  ('matrix_rows -> [ matrix_elems ]','matrix_rows',3,'p_matrix_rows','Mparser.py',161),
  ('matrix_elems -> expression , matrix_elems','matrix_elems',3,'p_matrix_elems','Mparser.py',168),
  ('matrix_elems -> expression','matrix_elems',1,'p_matrix_elems','Mparser.py',169),
  ('condition -> expression GREATER expression','condition',3,'p_condition','Mparser.py',176),
  ('condition -> expression LESS expression','condition',3,'p_condition','Mparser.py',177),
  ('condition -> expression GREATEREQ expression','condition',3,'p_condition','Mparser.py',178),
  ('condition -> expression LESSEQ expression','condition',3,'p_condition','Mparser.py',179),
  ('condition -> expression NOTEQ expression','condition',3,'p_condition','Mparser.py',180),
  ('condition -> expression EQ expression','condition',3,'p_condition','Mparser.py',181),
  ('if_stmt -> IF ( condition ) instruction','if_stmt',5,'p_if_stmt','Mparser.py',185),
  ('if_stmt -> IF ( condition ) instruction ELSE instruction','if_stmt',7,'p_if_stmt','Mparser.py',186),
  ('create_stmt -> p_print_list','create_stmt',1,'p_create_stmt','Mparser.py',194),
  ('p_print_list -> STRING','p_print_list',1,'p_print_list_1','Mparser.py',198),
  ('p_print_list -> p_print_list , expression','p_print_list',3,'p_print_list_2','Mparser.py',202),
  ('p_print_list -> expression','p_print_list',1,'p_print_list_2','Mparser.py',203),
  ('loops -> while_l','loops',1,'p_loops','Mparser.py',211),
  ('loops -> for_l','loops',1,'p_loops','Mparser.py',212),
  ('while_l -> WHILE ( condition ) instruction','while_l',5,'p_while_l','Mparser.py',216),
  ('for_l -> FOR ID = expression : expression instruction','for_l',7,'p_for_l','Mparser.py',220),
  ('return_expr -> RETURN','return_expr',1,'p_return_expr','Mparser.py',224),
  ('return_expr -> RETURN expression','return_expr',2,'p_return_expr','Mparser.py',225),
  ('expression -> ( expression )','expression',3,'p_expression_brackets','Mparser.py',232),
]
